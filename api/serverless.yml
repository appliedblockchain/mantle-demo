# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: mantle-demo # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">=1.38.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-1

  environment:
      ETHEREUM_JSONRPC_ENDPOINT: http://63.32.95.235:8545

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here

#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

package:
  individually: true
  exclude:
    - node_modules/web3/**

# layers:
#   web3:
#     path: web3-install-layer
#     description: Web3 module installed

functions:
  usersCreate:
    handler: src/sls-handlers/users.create
    layers:
      - arn:aws:lambda:eu-west-1:379937780633:layer:web3-1-0-0-beta-37:1
    events:
      - http:
          method: post
          path: users
          # cors: true
  usersList:
    handler: src/sls-handlers/users.list
    layers:
      - arn:aws:lambda:eu-west-1:379937780633:layer:web3-1-0-0-beta-37:1
    events:
      - http:
          method: get
          path: users
          # cors: true
  notesCreate:
    handler: src/sls-handlers/notes.create
    layers:
      - arn:aws:lambda:eu-west-1:379937780633:layer:web3-1-0-0-beta-37:1
    events:
      - http:
          method: post
          path: notes
          cors: true
  notesList:
    handler: src/sls-handlers/notes.list
    layers:
      - arn:aws:lambda:eu-west-1:379937780633:layer:web3-1-0-0-beta-37:1
    events:
      - http:
          method: get
          path: notes
          cors: true
  healthHello:
    handler: src/sls-handlers/health/hello.reply
    events:
      - http: get health
  healthNodejs:
    handler: src/sls-handlers/health/nodejs.getInfo
    events:
      - http: get health/nodejs
  healthEthApi:
    handler: src/sls-handlers/health/eth/api.getInfo
    events:
      - http: get health/eth
  healthEthBlocks:
    handler: src/sls-handlers/health/eth/blocks.getInfo
    layers:
      - arn:aws:lambda:eu-west-1:379937780633:layer:web3-1-0-0-beta-37:1
    events:
      - http: get health/eth/blocks

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-offline
